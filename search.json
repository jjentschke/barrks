[{"path":"/articles/bso.html","id":"bso-specific-plots","dir":"Articles","previous_headings":"","what":"BSO-specific plots","title":"The BSO model","text":"bso_phenology() returns detailed result phenology(), functions available illustration. stage diagram illustrates share total individuals specific developmental stage. BSO stage diagram (generation ‘0’ represents hibernating beetles) flight diagram shows relative flight activity specific date. BSO flight diagram (colors describe generation flies establish new filial generation sister brood respectively)","code":"bso_plot_stage_diagram(pheno_bso, 234) bso_plot_flight_diagram(pheno_bso, 234)"},{"path":"/articles/bso.html","id":"standard-outputs","dir":"Articles","previous_headings":"","what":"Standard outputs","title":"The BSO model","text":"bso_translate_phenology() possible translate BSO-specific phenology form corresponds output phenology(). makes possible use functions available analyse phenology objects. Generations calculated BSO model’","code":"pheno_translated <- bso_translate_phenology(pheno_bso)  dates <- c('2015-04-15', '2015-06-15', '2015-08-15', '2015-10-15') get_generations_rst(pheno_translated, dates) %>% my_rst_plot()"},{"path":"/articles/model-comparison.html","id":"calculate-phenology","dir":"Articles","previous_headings":"","what":"Calculate phenology","title":"Example: Model comparison","text":"vignette, sample data delivered barrks used calculate phenology models available package. Note daylength threshold diapause initiation Jönsson model adapted Central Europe Baier, Pennerstorfer, Schopf (2007).","code":"data <- barrks_data()  # calculate phenology phenos <- list('phenips-clim' = phenology('phenips-clim', data),                'phenips' = phenology('phenips', data),                'rity' = phenology('rity', data),                'lange' = phenology('lange', data),                # customize the Jönsson model for Central Europe                'joensson' = phenology(model('joensson', daylength_dia = 14.5), data),                'bso' = bso_phenology(.data = data) %>% bso_translate_phenology(),                'chapy' = phenology('chapy', data))"},{"path":"/articles/model-comparison.html","id":"spatial-outputs","dir":"Articles","previous_headings":"","what":"Spatial outputs","title":"Example: Model comparison","text":"barrks provides different functions examine results phenology calculations. section describes application basic functions return spatial outputs.","code":""},{"path":"/articles/model-comparison.html","id":"day-of-year-rasters","dir":"Articles","previous_headings":"Spatial outputs","what":"Day-of-year-rasters","title":"Example: Model comparison","text":"onset infestation, initiation diapause frost-induced mortality described corresponding day year. data can attained via get_onset_rst(), get_diapause_rst() get_mortality_rst(). models submodels implemented terra::panel() allow adding empty rasters, workaround-function defined plot respective submodel outputs. Additionally draws borders area interest. Day year infestation begins Day year diapause begins (white cells diapause induced) Day year first frost-induced mortality event autumn (white cells mortality happened)","code":"plot_doy_panel <- function(x) {    aoi <- as.polygons(data[[1]][[1]] * 0)    draw_aoi_borders <- function(i) {      if(empty[i]) polys(aoi, lwd = 2, col = 'white')     else polys(aoi, lwd = 2)   }    # Replace NULL by a raster with values in the overall range to not affect the legend.   # The raster will be overplotted by `draw_aoi_borders()`   rst_tmp <- data[[1]][[1]] * 0 + min(minmax(rast(discard(x, is.null)))[1,])   empty <- map_lgl(x, \\(y) is.null(y))   walk(which(empty), \\(i) x[[i]] <<- rst_tmp)    panel(rast(x),         names(x),         col = viridisLite::viridis(100, direction = -1),         axes = FALSE,         box = TRUE,         loc.main = 'topright',         fun = draw_aoi_borders,         cex.main = 1.9,         plg = list(cex = 1.8)) }  plot_doy_panel(map(phenos, \\(p) get_onset_rst(p))) plot_doy_panel(map(phenos, \\(p) get_diapause_rst(p))) plot_doy_panel(map(phenos, \\(p) get_mortality_rst(p)[[1]]))"},{"path":"/articles/model-comparison.html","id":"generations","dir":"Articles","previous_headings":"Spatial outputs","what":"Generations","title":"Example: Model comparison","text":"get overview establishment generations, possible plot prevailing generations different dates using get_generations_rst() my_rst_plot(). Generations calculated PHENIPS-CLIM Generations calculated PHENIPS Generations calculated RITY Generations calculated Lange model Generations calculated Jönsson model Generations calculated BSO model Generations calculated CHAPY","code":"# dates to plot dates <- c('2015-04-15', '2015-06-15', '2015-08-15', '2015-10-15')  # walk through all phenology models walk(names(phenos), \\(key) {    p <- phenos[[key]]    # plot generations of current model   get_generations_rst(p, dates) %>% my_rst_plot(main = paste0(key, '-', dates)) })"},{"path":"/articles/model-comparison.html","id":"stationwise-outputs","dir":"Articles","previous_headings":"","what":"Stationwise outputs","title":"Example: Model comparison","text":"plot development diagrams particular raster cells, stations can defined specifying cell numbers. get stations’ coordinates, terra::xyFromCell can used. Stations map stations passed plot_development_diagram() get desired plots. , models PHENIPS-Clim PHENIPS plotted reduce complexity diagrams. Development diagram station 1 Development diagram station 2","code":"# plot the locations of the stations  rst_aoi <- data[[1]][[1]] * 0 stations <- c(Station_1 = 234, Station_2 = 345) station_coords <- vect(xyFromCell(rst_aoi, stations))  plot(rst_aoi,  col = '#AAAAAA', legend = FALSE, axes = FALSE, box = TRUE) plot(station_coords, col = 'red', pch = 4, add = TRUE) text(station_coords, names(stations), col = 'black', pos = 2) # plot the development diagrams  limits <- as.Date(c('2015-04-01', '2015-12-31'))  models <- c('phenips-clim', 'phenips')  walk(1:length(stations), \\(i) {   plot_development_diagram(phenos[models],                            stations[i],                            .lty = 1:length(models),                            xlim = limits) })"},{"path":"/articles/model-customization.html","id":"customize-and-combine-models","dir":"Articles","previous_headings":"","what":"Customize and combine models","title":"Model customization","text":"modify parameters individual models new values passed model(). sample PHENIPS customized setting daylength threshold diapause submodel 14 hours. parameters available customization found model customization manuals listed model() manual. combine individual submodels, model_combine() used. parameters, individual models listed. combine model specific submodel, pass list keys model submodels. sample PHENIPS combined diapause submodel PHENIPS-Clim. compare model outputs, prevailing generations calculated models plotted four different dates. Generations calculated PHENIPS without modifications Generations calculated customized PHENIPS Generations calculated PHENIPS combined diapause submodel PHENIPS-Clim","code":"# calculate phenology with a customized model model_custom <- model('phenips', daylength_dia = 14) pheno_custom <- phenology(model_custom, data)  # calculate phenology with a combined model model_combined <- model_combine('phenips',                                 list(model = 'phenips-clim',                                      submodels = 'diapause')) pheno_combined <- phenology(model_combined, data)  # plot generations dates <- c('2015-04-15', '2015-06-15', '2015-08-15', '2015-10-15') get_generations_rst(pheno_std, dates) %>% my_rst_plot() get_generations_rst(pheno_custom, dates) %>% my_rst_plot() get_generations_rst(pheno_combined, dates) %>% my_rst_plot()"},{"path":"/articles/model-customization.html","id":"create-onset-diapause-or-mortality-events-manually","dir":"Articles","previous_headings":"","what":"Create onset, diapause or mortality events manually","title":"Model customization","text":"create phenological events manually, create_onset(), create_diapause() create_mortality() used. functions return multi-layer SpatRasters can used .onset, .diapause .mortality parameter phenology(). instance, practice can used implement personal observations. example, PHENIPS-Clim applied station data delivered barrks onset set May 1st. results plotted development diagram without sister broods keep simple. Development diagram PHENIPS manually created onset","code":"# calculate phenology without modification for comparison pheno_std <- phenology('phenips-clim', barrks_data('stations'))  # calculate phenology with a manually created onset onset <- create_onset(barrks_data('stations'), c(Freiburg = yday('2011-05-01'))) pheno_manual <- phenology('phenips-clim', barrks_data('stations'), .onset = onset)  # plot for comparison plot_development_diagram(list(default = pheno_std, manual = pheno_manual),                          xlim = as.Date(c('2011-03-01', '2011-12-31')),                          .generations = prop_filial_generations(pheno_std),                          .lty = c(2, 1),                          .lwd = 4,                          .legend_lty = list(lwd = 2),                          .group = FALSE)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jakob Jentschke. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jentschke J (2024). barrks: Calculate Bark Beetle Phenology. R package version 0.9.0.0.","code":"@Manual{,   title = {barrks: Calculate Bark Beetle Phenology},   author = {Jakob Jentschke},   year = {2024},   note = {R package version 0.9.0.0}, }"},{"path":"/index.html","id":"barrks","dir":"","previous_headings":"","what":"Calculate Bark Beetle Phenology","title":"Calculate Bark Beetle Phenology","text":"goal barrks (bark beetle raster kit seasonal development) calculate phenological development bark beetles. Rather implementing one specific model, package provides collection different models can chosen. Additionally, models can customized combined create individual model. calculations can done spatially explicit using raster inputs, based station inputs available data frames. Even though implemented models describe phenology Ips typographus, package limited particular bark beetle species. instance, CHAPY models phenology Pityogenes chalcographus package may extended models additional bark beetle species. full documentation barrks can found . following table lists models implemented package.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Calculate Bark Beetle Phenology","text":"development version barrks can installed GitHub: barrks published CRAN soon.","code":"devtools::install_github(\"jjentschke/barrks\")"},{"path":"/index.html","id":"basic-example","dir":"","previous_headings":"","what":"Basic Example","title":"Calculate Bark Beetle Phenology","text":"barrks comes sample data used . phenology calculated phenology() takes necessary inputs arguments. Subsequently, rasters emerged generations date can retrieved get_generations_rst(). terra::plot() can used visualize rasters. Generations plot barrks makes easy plot development individual generations. illustrate , “shaded” variant phenology calculated development diagram specific cell (called “station” barrks) plotted bith phenology variants. Development diagram","code":"library(barrks) library(tidyverse) library(terra)   # calculate phenology pheno <- phenology('phenips-clim', barrks_data())  # plot number of prevailing generations on 4 different dates dates <- c('2015-04-15', '2015-06-15', '2015-08-15', '2015-10-15') get_generations_rst(pheno, dates) %>% plot(mar = c(0.2, 0.1, 2, 5),                                            axes = FALSE, box = TRUE, nr = 1,                                            cex.main = 1.9, plg = list(cex = 1.8)) pheno_shaded <- phenology('phenips-clim', barrks_data(), exposure = 'shaded')  plot_development_diagram(list(pheno, pheno_shaded),                          stations_create('Example', 234),                          .legend_lty = FALSE,                          xlim = as.Date(c('2015-04-01', '2015-12-31')))"},{"path":[]},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/reference/analyse.phenology.bso.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyse a BSO generated phenology — analyse.phenology.bso","title":"Analyse a BSO generated phenology — analyse.phenology.bso","text":", functions listed available analyse results bso_phenology() call.","code":""},{"path":"/reference/analyse.phenology.bso.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analyse a BSO generated phenology — analyse.phenology.bso","text":"Get BSO phenology properties: prop_dates() prop_filial_generations() prop_first_date() prop_hatched_generations() prop_last_date() prop_sister_broods() prop_stations() prop_year() Get BSO phenology results: bso_get_flight_df() bso_get_flight_rst() bso_get_individuals_df() bso_get_individuals_rst() Plot BSO phenology results: bso_plot_flight_diagram() bso_plot_stage_diagram()","code":""},{"path":"/reference/analyse.phenology.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyse a phenology — analyse.phenology","title":"Analyse a phenology — analyse.phenology","text":", functions listed available analyse results phenology()-call.","code":""},{"path":"/reference/analyse.phenology.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analyse a phenology — analyse.phenology","text":"Get phenology properties: prop_dates() prop_filial_generations() prop_first_date() prop_hatched_generations() prop_last_date() prop_sister_broods() prop_stations() prop_year() Get phenology results: get_development_df() get_development_rst() get_diapause_df() get_diapause_rst() get_generations_df() get_generations_rst() get_hibernating_generations_df() get_hibernating_generations_rst() get_input_data() get_mortality_df() get_mortality_rst() get_onset_df() get_onset_rst() Plot phenology results: plot_development_diagram()","code":""},{"path":"/reference/barrks_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Get barrks default color palettes — barrks_colors","title":"Get barrks default color palettes — barrks_colors","text":"Get barrks default color palettes","code":""},{"path":"/reference/barrks_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get barrks default color palettes — barrks_colors","text":"","code":"barrks_colors(type = \"raster\")"},{"path":"/reference/barrks_colors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get barrks default color palettes — barrks_colors","text":"type Select desired color palette. different variants particular purposes. Allowed values 'raster', 'diagram_lines', 'diagram_fill', 'bso_flight' 'bso_stages'.","code":""},{"path":"/reference/barrks_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Load sample data — barrks_data","title":"Load sample data — barrks_data","text":"package comes sample data allow application models available. following datasets available:","code":""},{"path":"/reference/barrks_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load sample data — barrks_data","text":"","code":"barrks_data(dataset = \"raster\")"},{"path":"/reference/barrks_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Load sample data — barrks_data","text":"https://opendata.dwd.de/climate_environment/CDC/grids_germany/daily/hyras_de/ https://opendata.dwd.de/climate_environment/CDC/observations_germany/climate/daily/kl/historical https://opendata.dwd.de/climate_environment/CDC/observations_germany/climate/daily/solar","code":""},{"path":"/reference/barrks_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load sample data — barrks_data","text":"dataset Choose dataset returned.","code":""},{"path":"/reference/barrks_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load sample data — barrks_data","text":"raster Contains list raster weather datasets sample area. data taken Deutscher Wetterdienst (DWD). stations Contains sample station weather data cities Germany. data taken Deutscher Wetterdienst (DWD). Missing global radiation values replaced mean value stations.","code":""},{"path":"/reference/barrks_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Get barrks default legend labels — barrks_labels","title":"Get barrks default legend labels — barrks_labels","text":"Get barrks default legend labels","code":""},{"path":"/reference/barrks_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get barrks default legend labels — barrks_labels","text":"","code":"barrks_labels(type = \"raster\")"},{"path":"/reference/barrks_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get barrks default legend labels — barrks_labels","text":"type Select desired legend labels. different variants particular purposes. Allowed values 'raster', 'diagram', 'bso_flight' 'bso_stages'.","code":""},{"path":"/reference/bso_get_flight.html","id":null,"dir":"Reference","previous_headings":"","what":"Get flight of individuals (BSO only) — bso_get_flight_rst","title":"Get flight of individuals (BSO only) — bso_get_flight_rst","text":"Get number individuals flying.","code":""},{"path":"/reference/bso_get_flight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get flight of individuals (BSO only) — bso_get_flight_rst","text":"","code":"bso_get_flight_rst(pheno, generation, flight = 1, dates = prop_dates(pheno))  bso_get_flight_df(   pheno,   generation,   stations = prop_stations(pheno),   flight = 1,   dates = prop_dates(pheno) )"},{"path":"/reference/bso_get_flight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get flight of individuals (BSO only) — bso_get_flight_rst","text":"pheno BSO phenology (see bso_phenology()) generation Generation interest. sister broods, 0.5 added. dates Select dates present output. stations Pass character vector choose stations assigned pheno names, pass different stations. See stations_create() details.","code":""},{"path":"/reference/bso_get_flight.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Get flight of individuals (BSO only) — bso_get_flight_rst","text":"bso_get_flight_rst(): Returns multi-layer SpatRaster. bso_get_flight_df(): Returns data frame.","code":""},{"path":"/reference/bso_get_individuals.html","id":null,"dir":"Reference","previous_headings":"","what":"Get individuals (BSO only) — bso_get_individuals_rst","title":"Get individuals (BSO only) — bso_get_individuals_rst","text":"Get number individuals generation specific development stage.","code":""},{"path":"/reference/bso_get_individuals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get individuals (BSO only) — bso_get_individuals_rst","text":"","code":"bso_get_individuals_rst(   pheno,   generation,   stage = \"all\",   dates = prop_dates(pheno) )  bso_get_individuals_df(   pheno,   generation,   stations = prop_stations(pheno),   stage = \"all\",   dates = prop_dates(pheno) )"},{"path":"/reference/bso_get_individuals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get individuals (BSO only) — bso_get_individuals_rst","text":"pheno BSO phenology (see bso_phenology()) generation Generation interest. sister broods, 0.5 added. stage numeric, individuals slots specified retrieved. Otherwise one following values: , egg, larva, pupa, white (egg + larva + pupa), maturation, preflight, reproduction, brown (maturation + preflight + reproduction) dates Select dates present output. stations Pass character vector choose stations assigned pheno names, pass different stations. See stations_create() details.","code":""},{"path":"/reference/bso_get_individuals.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Get individuals (BSO only) — bso_get_individuals_rst","text":"bso_get_individuals_rst(): Returns multi-layer SpatRaster. bso_get_individuals_df(): Returns data frame.","code":""},{"path":"/reference/bso_phenology.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate phenology with the BSO model — bso_phenology","title":"Calculate phenology with the BSO model — bso_phenology","text":"BSO model works bit different models, seperate phenology function implemented model. Note onset development submodels needed taken BSO model, diapause mortality submodels compatible models. usage function corresponds phenology(). Look details.","code":""},{"path":"/reference/bso_phenology.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate phenology with the BSO model — bso_phenology","text":"","code":"bso_phenology(   .model = \"bso\",   .data = NULL,   .dates = NULL,   .win = NULL,   .ext = \"tif\",   .onset = NULL,   .diapause = NULL,   .mortality = NULL,   .submodels = c(\"onset\", \"diapause\", \"mortality\", \"development\"),   .setup_only = FALSE,   .stations = NULL,   .storage = NULL,   .quiet = FALSE,   ... )"},{"path":"/reference/bso_phenology.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate phenology with the BSO model — bso_phenology","text":".onset Note possible pass onset generate create_onset() bso_phenology. onsets BSO phenology (returned get_onset_rst(..., as_doy = FALSE)) can used .","code":""},{"path":"/reference/bso_phenology.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate phenology with the BSO model — bso_phenology","text":"Returns BSO phenology list. Look find BSO phenology can analysed. recommended access list elements directly. able use functions available phenology objects returned phenology(), call bso_translate_phenology().","code":""},{"path":"/reference/bso_plot_flight_diagram.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a flight diagram (BSO only) — bso_plot_flight_diagram","title":"Plot a flight diagram (BSO only) — bso_plot_flight_diagram","text":"flight diagram illustrates daily share flying individuals time.","code":""},{"path":"/reference/bso_plot_flight_diagram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a flight diagram (BSO only) — bso_plot_flight_diagram","text":"","code":"bso_plot_flight_diagram(   .pheno,   .station = prop_stations(.pheno)[1],   .colors = barrks_colors(\"bso_flight\"),   .labels = barrks_labels(\"bso_flight\"),   .xlim = NULL,   .legend = \"topright\",   ... )"},{"path":"/reference/bso_plot_flight_diagram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a flight diagram (BSO only) — bso_plot_flight_diagram","text":".pheno BSO phenology (see bso_phenology()) .station Pass character vector choose station assigned .pheno name, pass different station. See stations_create() details. .colors, .labels Vectors colors/labels starting first second flght hibernating generation followed consecutively elements filial generations (first second flight). .xlim Date vector length limits dates plotted. .legend Pass FALSE legend plotted. Otherwise value passed legend() first argument. Look information. ... arguments passed graphics::barplot().","code":""},{"path":"/reference/bso_plot_stage_diagram.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a stage diagram (BSO only) — bso_plot_stage_diagram","title":"Plot a stage diagram (BSO only) — bso_plot_stage_diagram","text":"stage diagram illustrates share individuals specific developmental stage time.","code":""},{"path":"/reference/bso_plot_stage_diagram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a stage diagram (BSO only) — bso_plot_stage_diagram","text":"","code":"bso_plot_stage_diagram(   .pheno,   .station = prop_stations(pheno)[1],   .stages = list(\"white\", \"brown\"),   .lty = c(\"dashed\", \"solid\"),   .lwd = 2,   .colors = barrks_colors(\"bso_stages\"),   .labels = barrks_labels(\"bso_stages\"),   .legend = c(\"col\", \"lty\"),   ... )"},{"path":"/reference/bso_plot_stage_diagram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a stage diagram (BSO only) — bso_plot_stage_diagram","text":".pheno BSO phenology (see bso_phenology()) .station Pass character vector choose station assigned .pheno name, pass different station. See stations_create() details. .stages List stages plot. Elements passed bso_get_individuals_df(). Look information. .lty, .lwd Vectors line types line widths used plot different stages. length .stages 1. .colors, .labels Vectors colors/labels starting hibernating generation followed consecutively elements filial generations (including sisterbroods). ... arguments passed base::plot().","code":""},{"path":"/reference/bso_translate_phenology.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate BSO generated phenology — bso_translate_phenology","title":"Translate BSO generated phenology — bso_translate_phenology","text":"BSO generated phenology analysed way phenology objects. able use functions available phenology objects returned phenology(), BSO generated phenology translated.","code":""},{"path":"/reference/bso_translate_phenology.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate BSO generated phenology — bso_translate_phenology","text":"","code":"bso_translate_phenology(pheno, threshold = 0.1, .quiet = FALSE)"},{"path":"/reference/bso_translate_phenology.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate BSO generated phenology — bso_translate_phenology","text":"pheno BSO phenology (see bso_phenology()) threshold Share individuals must reached specific development BSO phenology account corresponding standard phenology. .quiet TRUE, messages suppressed.","code":""},{"path":"/reference/bso_translate_phenology.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate BSO generated phenology — bso_translate_phenology","text":"Returns standard phenology list. Look find phenology can analysed. recommended access list elements directly.","code":""},{"path":"/reference/categorize_generations_rst.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a numeric generations raster categorical — categorize_generations_rst","title":"Make a numeric generations raster categorical — categorize_generations_rst","text":"Make numeric generations raster categorical.","code":""},{"path":"/reference/categorize_generations_rst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a numeric generations raster categorical — categorize_generations_rst","text":"","code":"categorize_generations_rst(   rst,   colors = barrks_colors(),   labels = barrks_labels() )"},{"path":"/reference/categorize_generations_rst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a numeric generations raster categorical — categorize_generations_rst","text":"rst numeric SpatRaster represents bark beetle generations. Sister broods defined adding 0.5 respective generation. colors, labels Vectors colors/labels starting zero generations followed consecutively elements respective generations (including sister broods).","code":""},{"path":"/reference/categorize_generations_rst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a numeric generations raster categorical — categorize_generations_rst","text":"categorical SpatRaster.","code":""},{"path":"/reference/create_daylength_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data frame of daylengths — create_daylength_df","title":"Create a data frame of daylengths — create_daylength_df","text":"Generate data frame daylengths given latitudes. package geosphere required use function.","code":""},{"path":"/reference/create_daylength_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data frame of daylengths — create_daylength_df","text":"","code":"create_daylength_df(lat, dates, .quiet = FALSE)"},{"path":"/reference/create_daylength_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data frame of daylengths — create_daylength_df","text":"lat (Named) vector latitudes. names vector indicate respective stations. names provided, numbers used instead. dates Dates processed. .quiet TRUE, messages suppressed.","code":""},{"path":"/reference/create_daylength_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data frame of daylengths — create_daylength_df","text":"data frame columns date, station daylength.","code":""},{"path":[]},{"path":"/reference/create_daylength_rst.html","id":null,"dir":"Reference","previous_headings":"","what":"Create daylength rasters — create_daylength_rst","title":"Create daylength rasters — create_daylength_rst","text":"Generate multi-layer SpatRaster daylengths given template. package geosphere required use function.","code":""},{"path":"/reference/create_daylength_rst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create daylength rasters — create_daylength_rst","text":"","code":"create_daylength_rst(   template,   dates = terra::time(template),   crs = \"EPSG:4258\",   .quiet = FALSE )"},{"path":"/reference/create_daylength_rst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create daylength rasters — create_daylength_rst","text":"template (Multi-layer) SpatRaster determines spatial extent result. dates Dates processed. specified, dates template used terra::time(). crs Coordinate reference system longitude/latitude metrics. used project raster coordinates able retrieve latitude. .quiet TRUE, messages suppressed.","code":""},{"path":"/reference/create_daylength_rst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create daylength rasters — create_daylength_rst","text":"Returns multi-layer SpatRaster. layer represents one date.","code":""},{"path":[]},{"path":"/reference/create_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Create phenological events (onset/diapause/mortality) — create_events","title":"Create phenological events (onset/diapause/mortality) — create_events","text":"Generate onset, diapause mortality manually able run phenology() observed arbitrary inputs.","code":""},{"path":"/reference/create_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create phenological events (onset/diapause/mortality) — create_events","text":"","code":"create_onset(   template,   doys = NULL,   stations = NULL,   dates = NULL,   .quiet = FALSE )  create_diapause(   template,   doys = NULL,   stations = NULL,   dates = NULL,   .quiet = FALSE )  create_mortality(   template,   doys = NULL,   stations = NULL,   dates = NULL,   .quiet = FALSE )"},{"path":"/reference/create_events.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create phenological events (onset/diapause/mortality) — create_events","text":"template SpatRaster data frame determines spatial temporal extent result. single-layer SpatRaster passed, temporal extent defined using dates. doys Numeric vector, (multi-layer) SpatRaster data frame specifies days year event triggered. Vectors define events globally whereas SpatRasters allow spatially explict definitions. creation events based stations, data frames used. case, field station specifies station name doy indicates respective day year. stations template SpatRaster doys data frame, stations passed define cells affected. See stations_create() details. dates Dates define temporal extent output template single-layer SpatRaster. .quiet TRUE, messages suppressed.","code":""},{"path":"/reference/create_events.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create phenological events (onset/diapause/mortality) — create_events","text":"Logical multi-layer SpatRaster.","code":""},{"path":"/reference/create_events.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Create phenological events (onset/diapause/mortality) — create_events","text":"create_onset(): Create onset. create_diapause(): Create diapause. create_mortality(): Create mortality events.","code":""},{"path":"/reference/create_suntimes_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data frame of sunrises and sunsets — create_suntimes_df","title":"Create a data frame of sunrises and sunsets — create_suntimes_df","text":"Generate data frame specifies sunrises sunsets different coordinates dates. package suncalc required use function.","code":""},{"path":"/reference/create_suntimes_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data frame of sunrises and sunsets — create_suntimes_df","text":"","code":"create_suntimes_df(coords, dates, tz = Sys.timezone(), .quiet = FALSE)"},{"path":"/reference/create_suntimes_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data frame of sunrises and sunsets — create_suntimes_df","text":"coords Data frame fields station, lat lon. Defines latitude longitude respective stations. dates Dates processed. tz Timezone results. .quiet TRUE, messages suppressed.","code":""},{"path":"/reference/create_suntimes_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data frame of sunrises and sunsets — create_suntimes_df","text":"data frame columns date, station sunrise sunset. values sunrise sunset indicate respective time minutes.","code":""},{"path":[]},{"path":"/reference/create_suntimes_rsts.html","id":null,"dir":"Reference","previous_headings":"","what":"Create rasters that indicate sunrise and sunset — create_suntimes_rsts","title":"Create rasters that indicate sunrise and sunset — create_suntimes_rsts","text":"Generate list two multi-layer SpatRasters given template indicate sunrise sunset respective cells. package suncalc required use function.","code":""},{"path":"/reference/create_suntimes_rsts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create rasters that indicate sunrise and sunset — create_suntimes_rsts","text":"","code":"create_suntimes_rsts(   template,   dates = terra::time(template),   crs = \"EPSG:4258\",   tz = Sys.timezone(),   .quiet = FALSE )"},{"path":"/reference/create_suntimes_rsts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create rasters that indicate sunrise and sunset — create_suntimes_rsts","text":"template (Multi-layer) SpatRaster determines spatial extent result. dates Dates processed. specified, dates template used terra::time(). crs Coordinate reference system longitude/latitude metrics. used project raster coordinates able retrieve longitude latitude. tz Timezone results. .quiet TRUE, messages suppressed.","code":""},{"path":"/reference/create_suntimes_rsts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create rasters that indicate sunrise and sunset — create_suntimes_rsts","text":"Returns list elements sunrise sunset multi-layer SpatRasters. values indicate respective time minutes. layer represents one date.","code":""},{"path":[]},{"path":"/reference/get_development.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the beetles development — get_development_rst","title":"Get the beetles development — get_development_rst","text":"Get beetles development specific generations.","code":""},{"path":"/reference/get_development.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the beetles development — get_development_rst","text":"","code":"get_development_rst(pheno, generation, dates = prop_dates(pheno))  get_development_df(   pheno,   stations = prop_stations(pheno),   generation = prop_hatched_generations(pheno),   dates = prop_dates(pheno) )"},{"path":"/reference/get_development.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the beetles development — get_development_rst","text":"pheno  phenology (see phenology()) generation Generation interest. sister broods, 0.5 added. dates Select dates present output. stations Pass character vector choose stations assigned pheno names, pass different stations. See stations_create() details.","code":""},{"path":"/reference/get_development.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Get the beetles development — get_development_rst","text":"get_development_rst(): Returns multi-layer SpatRaster. value -1 implies generation present yet. get_development_df(): Multiple generations allowed value generation. Returns data frame contains field generation  (gen_1, gen_1.5, gen_2, gen_2.5, ...). value -1 implies generation present yet.","code":""},{"path":"/reference/get_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Get onset, diapause or mortality — get_onset_rst","title":"Get onset, diapause or mortality — get_onset_rst","text":"Get onset, diapause mortality day year raw output.","code":""},{"path":"/reference/get_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get onset, diapause or mortality — get_onset_rst","text":"","code":"get_onset_rst(pheno, as_doy = TRUE, dates = prop_dates(pheno))  get_onset_df(   pheno,   stations = prop_stations(pheno),   as_doy = TRUE,   dates = prop_dates(pheno) )  get_diapause_rst(pheno, as_doy = TRUE, dates = prop_dates(pheno))  get_diapause_df(   pheno,   stations = prop_stations(pheno),   as_doy = TRUE,   dates = prop_dates(pheno) )  get_mortality_rst(pheno, as_doy = TRUE, dates = prop_dates(pheno))  get_mortality_df(   pheno,   stations = prop_stations(pheno),   as_doy = TRUE,   dates = prop_dates(pheno) )"},{"path":"/reference/get_events.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get onset, diapause or mortality — get_onset_rst","text":"pheno  phenology (see phenology()) as_doy TRUE, day year returned. FALSE phenological events returned raw format. , return value used input phenology()/bso_phenology() (parameters .onset, .diapause .mortality). dates Select dates present output. stations Pass character vector choose stations assigned pheno names, pass different stations. See stations_create() details.","code":""},{"path":"/reference/get_events.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Get onset, diapause or mortality — get_onset_rst","text":"get_onset_rst(): Returns (multi-layer) SpatRaster onset. get_onset_df(): Returns data frame onset. get_diapause_rst(): Returns (multi-layer) SpatRaster diapause. get_diapause_df(): Returns data frame diapause. get_mortality_rst(): Returns (multi-layer) SpatRaster mortality. get_mortality_df(): Returns data frame mortality.","code":""},{"path":"/reference/get_generations.html","id":null,"dir":"Reference","previous_headings":"","what":"Get generations — get_generations_rst","title":"Get generations — get_generations_rst","text":"Find many generations present (reached development threshold).","code":""},{"path":"/reference/get_generations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get generations — get_generations_rst","text":"","code":"get_generations_rst(   pheno,   dates = prop_last_date(pheno),   threshold = 0,   generations = prop_hatched_generations(pheno),   categorical = TRUE,   colors = barrks_colors(\"raster\"),   labels = barrks_labels(\"raster\") )  get_generations_df(   pheno,   stations = prop_stations(pheno),   dates = prop_dates(pheno),   threshold = 0 )  get_hibernating_generations_rst(   pheno,   categorical = TRUE,   colors = barrks_colors(\"raster\"),   labels = barrks_labels(\"raster\") )  get_hibernating_generations_df(pheno, stations = prop_stations(pheno))"},{"path":"/reference/get_generations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get generations — get_generations_rst","text":"pheno  phenology (see phenology()) dates Select dates present output. threshold Threshold beetle development account generation. generations Numeric vector determines generations included result. categorical Set FALSE SpatRaster returned numeric. Otherwise, categorical. colors, labels Vectors colors/labels starting zero generations followed consecutively elements respective generations (including sister broods). stations Pass character vector choose stations assigned pheno names, pass different stations. See stations_create() details.","code":""},{"path":"/reference/get_generations.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Get generations — get_generations_rst","text":"get_generations_rst(): Returns multi-layer SpatRaster generations. get_generations_df(): Returns data frame generations. get_hibernating_generations_rst(): Returns SpatRaster generations able hibernate (available model's end date reached). get_hibernating_generations_df(): Returns data frame generations able hibernate (available model's end date reached).","code":""},{"path":"/reference/get_input_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get (preprocessed) input data — get_input_data","title":"Get (preprocessed) input data — get_input_data","text":"function returns list contains input data phenology well intermediate results needed preprocessed inputs model. result can used input phenology() avoid redundant calculations.","code":""},{"path":"/reference/get_input_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get (preprocessed) input data — get_input_data","text":"","code":"get_input_data(pheno)"},{"path":"/reference/get_input_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get (preprocessed) input data — get_input_data","text":"pheno  phenology (see phenology())","code":""},{"path":"/reference/list_models.html","id":null,"dir":"Reference","previous_headings":"","what":"List all models — list_models","title":"List all models — list_models","text":"Get names available models.","code":""},{"path":"/reference/list_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all models — list_models","text":"","code":"list_models()"},{"path":"/reference/load_phenology.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a phenology — load_phenology","title":"Load a phenology — load_phenology","text":"Loads phenology path.","code":""},{"path":"/reference/load_phenology.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a phenology — load_phenology","text":"","code":"load_phenology(   .storage,   .submodels = c(\"onset\", \"diapause\", \"mortality\", \"development\"),   .ext = \".tif\",   .quiet = FALSE )"},{"path":"/reference/load_phenology.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a phenology — load_phenology","text":".storage Path phenology loaded . .submodels submodels loaded. .ext Extension raster files. .quiet TRUE, messages suppressed.","code":""},{"path":"/reference/model.bso.apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Use the BSO model — model.bso.apply","title":"Use the BSO model — model.bso.apply","text":"page describes usage BSO model phenology(). model-specific inputs listed basic functionality explained. BSO model published Jakoby et al. (2019)  parametrized Ips typographus Switzerland. Note onset development submodel support usage storage (except precalculations).","code":""},{"path":"/reference/model.bso.apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use the BSO model — model.bso.apply","text":"","code":"bso_phenology(\"bso\", ..., tmin, tmax, sunrise, sunset,               n = 1e+09, max_generations = 4)  # calculate submodels separately bso_phenology(\"bso\", ..., .submodels = 'onset',               tmin, tmax, sunrise, sunset, n = 1e+09) bso_phenology(\"bso\", ..., .submodels = 'diapause', tmin, tmax) bso_phenology(\"bso\", ..., .submodels = 'development',               .onset, .diapause = NULL, .mortality = NULL,               tmin, tmax, sunrise, sunset,               max_generations = 4)"},{"path":"/reference/model.bso.apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use the BSO model — model.bso.apply","text":"... See bso_phenology() detailled description function. tmin, tmax Daily minimum/maximum air temperatures °C. sunrise, sunset Time sunrise/sunset minutes midnight. Can created create_suntimes_rsts() create_suntimes_df(). n number individuals simulate. max_generations maximum number generations calculate.","code":""},{"path":"/reference/model.bso.apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use the BSO model — model.bso.apply","text":"function returns BSO phenology. Look find can analysed.","code":""},{"path":"/reference/model.bso.apply.html","id":"functioning-of-the-bso","dir":"Reference","previous_headings":"","what":"Functioning of the BSO","title":"Use the BSO model — model.bso.apply","text":"following, basic functioning BSO model explained. Onset: onset swarming start degree days mean temperature reach specific threshold regeneration feeding individuals finished (Look development details). Development: development single individuals simulated. simulation individual realized passing multitude slots grouped stages. hourly probability individual enter next slot depends current stage phloem temperature. hourly temperature derived minimum maximum temperatures using sine interpolition. hourly phloem temperature calculated using Newton's Law Cooling (see Trân et al. 2007 ). Diapause: Specific photoperiod-related dates define diapause initiated earliest latest. dates, diapause initiated mean temperature falls specific threshold. Mortality: BSO model mortality submodel implemented. Look find model parameters affect actual calculations values used default.","code":""},{"path":"/reference/model.bso.apply.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Use the BSO model — model.bso.apply","text":"Jakoby O, Lischke H, Wermelinger B (2019). “Climate change alters elevational phenology patterns European spruce bark beetle (Ips typographus).” Global Change Biology, 25(12), 4048-4063. doi:10.1111/gcb.14766 . Trân JK, Ylioja T, Billings RF, Régnière J, Ayres MP (2007). “Impact minimum winter temperatures population dynamics Dendroctonus frontalis.” Ecological Applications, 17(3), 882-899. doi:10.1890/06-0512 .","code":""},{"path":[]},{"path":"/reference/model.bso.customize.html","id":null,"dir":"Reference","previous_headings":"","what":"Customize the BSO model — model.bso.customize","title":"Customize the BSO model — model.bso.customize","text":"barrks, model() used customize model. , parameters described can used customize BSO model. model developed Jakoby et al. (2019) . Look find apply model.","code":""},{"path":"/reference/model.bso.customize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Customize the BSO model — model.bso.customize","text":"","code":"model(\"bso\",        # ==== onset ====        dd_onset_start_date = '01-01',       dd_onset_base = 5.124198,       dd_onset_threshold = 100,       slot_dia = 6,        # ==== onset + development ====        k = 2.853738e-02,       alpha = c(0.0000789, 1.009450e-05, 2.549060e-05),       tlo = c(4.760089e+00, -4.424628e+00, -1.297644e+01),       tup = c(4.002483e+01, 3.999390e+01, 3.600070e+01),       tfly_min = 16.1064,       tfly_max = 31.2901,       pfly_max = 9.863263e-03,       beta = 1.363763,        num_slots = c(         'reproduction' = 11,         'egg' = 18,         'larva' = 45,         'pupa' = 8,         'maturation' = 8,         'preflight' = 1       ),        # ==== development ====        model_end_date = '12-30',        psis = 2.994450e-01,       slot_sis = 4,        # ==== diapause ====        diapause_first = 210,       diapause_last = 232,       tdia_min = 1.645209e+01 )"},{"path":"/reference/model.bso.customize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Customize the BSO model — model.bso.customize","text":"dd_onset_start_date date, degree days start sum ('MM-DD'). dd_onset_base Base temperature calculate degree days trigger onset. dd_onset_threshold Degree days required individuals start regeneration feeding slot_dia maturation stage. regeneration feeding finished, onset triggered. slot_dia Maturation feeding slot individuals start regeneration feeding diapause. k Factor calculation phloem temperature. alpha, tlo, tup Parameters used calculate transition probabilities stage (except preflight) following order: development, maturation feeding, reproduction. tfly_min, tfly_max, pfly_max, beta Parameters used calculate transition probabilities preflight stage. num_slots Named vector defines number slots stage. development stage subdivided stages egg, larva pupa. model_end_date Date model ends. psis Probability sister brood established. slot_sis Maturation feeding slot individuals start regeneration feeding establish sister brood. diapause_first day year diapause start earliest. diapause_last day year diapause start latest. tdia_min diapause initiated average daily temperature falls value.","code":""},{"path":"/reference/model.bso.customize.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Customize the BSO model — model.bso.customize","text":"Jakoby O, Lischke H, Wermelinger B (2019). “Climate change alters elevational phenology patterns European spruce bark beetle (Ips typographus).” Global Change Biology, 25(12), 4048-4063. doi:10.1111/gcb.14766 .","code":""},{"path":[]},{"path":"/reference/model.chapy.apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Use CHAPY — model.chapy.apply","title":"Use CHAPY — model.chapy.apply","text":"page describes usage CHAPY phenology(). model specific inputs listed basic functionality explained. CHAPY published Ogris et al. (2020)  parametrized Pityogenes chalcographus Slovenia.","code":""},{"path":"/reference/model.chapy.apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use CHAPY — model.chapy.apply","text":"","code":"phenology(\"chapy\", ..., tmin = NULL, tmean = NULL, tmax, daylength, mode = 'max')  # calculate submodels separately phenology(\"chapy\", ..., .submodels = 'onset', tmax) phenology(\"chapy\", ..., .submodels = 'diapause', daylength) phenology(\"chapy\", ..., .submodels = 'mortality', tmax) phenology(\"chapy\", ..., .submodels = 'development',           .onset, .diapause = NULL, .mortality = NULL,           tmin = NULL, tmean = NULL, tmax = NULL, mode = 'max')"},{"path":"/reference/model.chapy.apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use CHAPY — model.chapy.apply","text":"tmin, tmean, tmax Daily minimum/mean/maximum air temperatures °C. development submodel, parameter obligatory depends mode. daylength Length day hours. Can created create_daylength_rst() create_daylength_rst(). mode Specifies temperature used calculate development. Can min, mean max. .submodels, .onset, .diapause, .mortality, ... See phenology() detailled description function.","code":""},{"path":"/reference/model.chapy.apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use CHAPY — model.chapy.apply","text":"function returns phenology. Look find can analysed.","code":""},{"path":"/reference/model.chapy.apply.html","id":"functioning","dir":"Reference","previous_headings":"","what":"Functioning","title":"Use CHAPY — model.chapy.apply","text":"functioning CHAPY identical RITY different parametrization.","code":""},{"path":"/reference/model.chapy.apply.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Use CHAPY — model.chapy.apply","text":"Ogris N, Ferlan M, Hauptman T, Pavlin R, Kavčič , Jurc M, de Groot M (2020). “Sensitivity analysis, calibration validation phenology model Pityogenes chalcographus (CHAPY).” Ecological Modelling, 430, 109137. ISSN 0304-3800, doi:10.1016/j.ecolmodel.2020.109137 .","code":""},{"path":[]},{"path":"/reference/model.chapy.customize.html","id":null,"dir":"Reference","previous_headings":"","what":"Customize CHAPY — model.chapy.customize","title":"Customize CHAPY — model.chapy.customize","text":"barrks, model() used customize model. , parameters described can used customize CHAPY. model developed Ogris et al. (2020) . Look find apply model.","code":""},{"path":"/reference/model.chapy.customize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Customize CHAPY — model.chapy.customize","text":"","code":"model(\"chapy\",        # ==== onset ====        dd_onset_start_date = '03-09',       dd_onset_base = 7.4,       dd_onset_threshold = 216.5,        # ==== onset + development ====        tfly = 15.6,        # ==== development ====        dd_development_base = 7.4,       dd_total_dev = 635.4,       dev_start = 0,       dev_end = 1,       dev_sister_brood = 0.5,       dev_mortal_min = NULL,       dev_mortal_max = 0.8,        func_ftmin = function(tmin) { 1.44 + 0.82 * tmin },       func_ftmean = function(tmean) { 0.50 + 0.81 * tmean },       func_ftmax = function(tmax) { 1.03 + 0.86 * tmax },        func_btmin = function(atmin) { 0.56 + 0.99 * atmin },       func_btmean = function(atmean) { -0.48 + 1.03 * atmean },       func_btmax = function(atmax) { 0.03 + 0.99 * atmax },        dt_low = 7.4,       dt_up = 39.4,       topt = 30,       tmax = 41.97,       alpha = 0.031,       beta = 5.3,       gamma = 1.25,        # ==== diapause ====        daylength_dia = 13.6,        # ==== mortality ====        model_end_date = '12-31' )"},{"path":"/reference/model.chapy.customize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Customize CHAPY — model.chapy.customize","text":"dd_onset_start_date date, degree days start sum ('MM-DD'). dd_onset_base Base temperature calculate degree days trigger onset. dd_onset_threshold Degree days required trigger onset infestation. Additionally, maximum temperature must exceed tfly. tfly Minimum temperature beetles need fly. dd_development_base Base temperature calculate degree days development. dd_total_dev Degree days required generation fully develop dev_start, dev_end Share total development egg development starts juvenile beetle's development ends respectively. Usable development /thresholds account mating, oviposition etc. dev_sister_brood Share total development, sister brood established. dev_mortal_min, dev_mortal_max Minimum/maximum share total development white stages (egg, larva, pupa). stages, beetles die caused mortality event. func_ftmean, func_ftmax, func_atdiff Functions caclulate air temperature forest stands (see Ogris et al. 2019 , equations 1 - 3). parameter passed SpatRaster: tmin: min air temperature tmean: mean air temperature tmax: maximum air temperature func_btmean, func_btmax, func_btdiff Functions caclulate bark temperature (see Ogris et al. 2019 , equations 4 - 6). parameter passed SpatRaster: ftmin: min air temperature forest stands ftmean: mean air temperature forest stands ftmax: maximum air temperature forest stands dt_low, dt_up, topt, tmax, alpha, beta, gamma Parameters calculate effective bark temperature (see Ogris et al. 2020 , equations .7 - .9). daylength_dia daylength falls threshold, diapause initiated. model_end_date Date model ends white stages (egg, larva, pupa) die.","code":""},{"path":"/reference/model.chapy.customize.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Customize CHAPY — model.chapy.customize","text":"Ogris N, Ferlan M, Hauptman T, Pavlin R, Kavčič , Jurc M, De Groot M (2019). “RITY--phenology model Ips typographus tool optimization monitoring.” Ecological Modelling, 410, 108775. doi:10.1016/j.ecolmodel.2019.108775 . Ogris N, Ferlan M, Hauptman T, Pavlin R, Kavčič , Jurc M, de Groot M (2020). “Sensitivity analysis, calibration validation phenology model Pityogenes chalcographus (CHAPY).” Ecological Modelling, 430, 109137. ISSN 0304-3800, doi:10.1016/j.ecolmodel.2020.109137 .","code":""},{"path":[]},{"path":"/reference/model.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a phenology model — model","title":"Get a phenology model — model","text":"Returns (customized) phenology model.","code":""},{"path":"/reference/model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a phenology model — model","text":"","code":"model(m, ...)"},{"path":"/reference/model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a phenology model — model","text":"m Name model return value another model()-call. ... List parameters customize model.","code":""},{"path":[]},{"path":"/reference/model.joensson.apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Use the Jönnson model — model.joensson.apply","title":"Use the Jönnson model — model.joensson.apply","text":"page describes usage Jönsson model phenology(). model specific inputs listed basic functionality explained. Jönsson model published Jönsson et al. (2011)  parametrized Ips typographus southern Sweden.","code":""},{"path":"/reference/model.joensson.apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use the Jönnson model — model.joensson.apply","text":"","code":"phenology(\"joensson\", ..., tmean, tmax, daylength, mode = 'fast')  # calculate submodels separately phenology(\"joensson\", ..., .submodels = 'onset', tmax) phenology(\"joensson\", ..., .submodels = 'diapause', tmax, daylength) phenology(\"joensson\", ..., .submodels = 'development',           .onset, .diapause = NULL, .mortality = NULL,           tmean, mode = 'fast')"},{"path":"/reference/model.joensson.apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use the Jönnson model — model.joensson.apply","text":"... See phenology() detailled description function. tmean, tmax Daily mean/maximum temperatures °C. daylength Length day hours. Can created create_daylength_rst() create_daylength_rst(). mode Can 'fast' (default) 'slow'. Determines lower ('fast') upper ('slow') limit development  genertion used.","code":""},{"path":"/reference/model.joensson.apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use the Jönnson model — model.joensson.apply","text":"function returns phenology. Look find can analysed.","code":""},{"path":"/reference/model.joensson.apply.html","id":"functioning","dir":"Reference","previous_headings":"","what":"Functioning","title":"Use the Jönnson model — model.joensson.apply","text":"following, basic functioning Jönsson model explained. Onset: onset swarming triggerd degree days maximum temperature reach specific threshold maximum temperature exceeds minimum flight temperature. onset infestation triggered seven days later account pre-oviposition period. Development: development progresses proportional degree days mean temperature. account varying sun exposures, two different thermal thresholds defined reflect lower upper limit development. generations starts swarming finished development maximum temperature exceeds minimum flight temperature. Seven days later, development new generation starts. Diapause: diapause initiated daylength falls threshold. recommended adjust daylength threshold applying elsewhere (e.g. values literature). Jönsson et al. (2011)  proposes model calculate daylength threshold based long-term climate data. Mortality: Jönsson model mortality submodel implemented. Look find model parameters affect actual calculations values used default.","code":""},{"path":"/reference/model.joensson.apply.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Use the Jönnson model — model.joensson.apply","text":"Jönsson , Harding S, Krokene P, Lange H, Lindeloew , Oekland B, Ravn HP, Schroeder LM (2011). “Modelling potential impact global warming Ips typographus voltinism reproductive diapause.” Climatic Change, 109, 695-718. doi:10.1007/s10584-011-0038-4 .","code":""},{"path":[]},{"path":"/reference/model.joensson.customize.html","id":null,"dir":"Reference","previous_headings":"","what":"Customize the Jönsson model — model.joensson.customize","title":"Customize the Jönsson model — model.joensson.customize","text":"barrks, model() used customize model. , parameters described can used customize Jönsson. model developed Jönsson et al. (2011) . Look find apply model.","code":""},{"path":"/reference/model.joensson.customize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Customize the Jönsson model — model.joensson.customize","text":"","code":"model(\"joensson\",        # ==== onset ====        dd_onset_start_date = '01-01',       dd_onset_base = 5,       dd_onset_threshold = 120,        # ==== onset + development ====        tfly = 20,        # ==== development ====        model_end_date = '12-31',        dd_development_base = 5,       dd_total_dev_lower = 625,       dd_total_dev_upper = 750,       dev_start = 0,       dev_end = 1,       dev_mortal_min = NULL,       dev_mortal_max = NULL,        # ==== diapause ====        daylength_dia = 19.3,       tdia_min = 15 )"},{"path":"/reference/model.joensson.customize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Customize the Jönsson model — model.joensson.customize","text":"dd_onset_start_date date, degree days start sum ('MM-DD'). dd_onset_base Base temperature calculate degree days trigger onset. dd_onset_threshold Degree days required trigger onset infestation. Additionally, maximum temperature must exceed tfly. tfly Minimum temperature beetles need fly. model_end_date Date model ends. dd_development_base Base temperature calculate degree days development. dd_total_dev_lower, dd_total_dev_upper Lower/upper limit degree days required generation fully develop dev_start, dev_end Share total development egg development starts juvenile beetle's development ends respectively. Usable development /thresholds account mating, oviposition etc. dev_mortal_min, dev_mortal_max Minimum/maximum share total development white stages (egg, larva, pupa). stages, beetles die caused mortality event. daylength_dia, tdia_min daylength falls daylength_dia average daily temperature falls tdia_min, diapause initiated. default value critical daylength set 19.3 hours according Schroeder Dalin (2017)  examined photoperiodic diapause induction Sweden. model used regions, value adjusted.","code":""},{"path":"/reference/model.joensson.customize.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Customize the Jönsson model — model.joensson.customize","text":"Jönsson , Harding S, Krokene P, Lange H, Lindeloew , Oekland B, Ravn HP, Schroeder LM (2011). “Modelling potential impact global warming Ips typographus voltinism reproductive diapause.” Climatic Change, 109, 695-718. doi:10.1007/s10584-011-0038-4 . Schroeder M, Dalin P (2017). “Differences photoperiod-induced diapause plasticity among different populations bark beetle Ips typographus predator Thanasimus formicarius.” Agricultural Forest Entomology, 19(2), 146-153. doi:10.1111/afe.12189 .","code":""},{"path":[]},{"path":"/reference/model.lange.apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Use the Lange model — model.lange.apply","title":"Use the Lange model — model.lange.apply","text":"page describes usage Lange model phenology(). model specific inputs listed basic functionality explained. model published Lange et al. (2006)  Ips typographus.","code":""},{"path":"/reference/model.lange.apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use the Lange model — model.lange.apply","text":"","code":"phenology(\"lange\", ..., tmin, tmean, tmax)  # calculate submodels separately phenology(\"lange\", ..., .submodels = 'onset', tmean, tmax) phenology(\"lange\", ..., .submodels = 'mortality', tmin) phenology(\"lange\", ..., .submodels = 'development',           .onset, .diapause = NULL, .mortality = NULL,           tmean, tmax)"},{"path":"/reference/model.lange.apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use the Lange model — model.lange.apply","text":"tmin, tmean, tmax Daily minimum/mean/maximum temperatures °C. .submodels, .onset, .diapause, .mortality, ... See phenology() detailled description function.","code":""},{"path":"/reference/model.lange.apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use the Lange model — model.lange.apply","text":"function returns phenology. Look find can analysed.","code":""},{"path":"/reference/model.lange.apply.html","id":"functioning","dir":"Reference","previous_headings":"","what":"Functioning","title":"Use the Lange model — model.lange.apply","text":"following, basic functioning Lange model explained. Onset: onset swarming triggerd degree days maximum temperature reach specific threshold maximum temperature exceeds minimum flight temperature according Annila (1969) . Development: development calculated using stage-specific temperature sums thresholds (Wermelinger Seifert 1998) . new generation starts development last generation finished development maximum temperature exceeds minimum flight temperature. Diapause: Lange model diapause submodel implemented. Mortality: White stages (egg pupa) die minimum temperature falls specific threshold. Look find model parameters affect actual calculations values used default.","code":""},{"path":"/reference/model.lange.apply.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Use the Lange model — model.lange.apply","text":"Annila E (1969). “Influence temperature upon development voltinism Ips typographus L. (Coleoptera, Scolytidae).” Annales Zoologici Fennici, 6(2), 161--208. http://www.jstor.org/stable/23731366. Lange H, Oekland B, Krokene P (2006). “Thresholds life cycle spruce bark beetle climate change.” Interjournal Complex Syst., 1648. Wermelinger B, Seifert M (1998). “Analysis temperature dependent development spruce bark beetle Ips typographus (L) (Col., Scolytidae).” Journal Applied Entomology, 122(1-5), 185-191. doi:10.1111/j.1439-0418.1998.tb01482.x .","code":""},{"path":[]},{"path":"/reference/model.lange.customize.html","id":null,"dir":"Reference","previous_headings":"","what":"Customize the Lange model — model.lange.customize","title":"Customize the Lange model — model.lange.customize","text":"barrks, model() used customize model. , parameters described can used customize Lange. model developed Lange et al. (2006) . Look find apply model.","code":""},{"path":"/reference/model.lange.customize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Customize the Lange model — model.lange.customize","text":"","code":"model(\"lange\",        # ==== onset ==== #        dd_onset_start_date = '01-01',       dd_onset_base = 5,       dd_onset_threshold = 110,        # ==== onset + development ====        tfly = 19.5,        # ==== development ==== #        model_end_date = '12-31',        dd_base_stages = c(10.6, 8.2, 9.9, 3.2),       dd_threshold_stages = c(51.8, 204.4, 57.7, 238.5),        # ==== mortality ==== #        first_lethal_date = '09-01',       tlethal = 0 )"},{"path":"/reference/model.lange.customize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Customize the Lange model — model.lange.customize","text":"dd_onset_start_date date, degree days start sum ('MM-DD'). dd_onset_base Base temperature calculate degree days trigger onset. dd_onset_threshold Degree days required trigger onset infestation. Additionally, maximum temperature must exceed tfly. tfly Minimum temperature beetles need fly. model_end_date Date model ends. dd_base_stages Base temperatures calculate degree days different stages following order: egg, larva, pupa, juvenile adult. dd_threshold_stages Thermal thresholds different stages following order: egg, larva, pupa, juvenile adult. first_lethal_date Date mortality modeled. tlethal Temperature threshold white stages (egg, larva, pupa) die.","code":""},{"path":"/reference/model.lange.customize.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Customize the Lange model — model.lange.customize","text":"Lange H, Oekland B, Krokene P (2006). “Thresholds life cycle spruce bark beetle climate change.” Interjournal Complex Syst., 1648.","code":""},{"path":[]},{"path":"/reference/model.phenips.apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Use PHENIPS — model.phenips.apply","title":"Use PHENIPS — model.phenips.apply","text":"page describes usage PHENIPS phenology(). model specific inputs listed basic functionality explained. PHENIPS published Baier et al. (2007)  parametrized Kalkalpen National Park Austria Ips typographus.","code":""},{"path":"/reference/model.phenips.apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use PHENIPS — model.phenips.apply","text":"","code":"phenology(\"phenips\", ..., tmean, tmax, rad, daylength,           exposure = 'sunny', sister_broods = TRUE)  # calculate submodels separately phenology(\"phenips\", ..., .submodels = 'onset', tmax) phenology(\"phenips\", ..., .submodels = 'diapause', daylength) phenology(\"phenips\", ..., .submodels = 'mortality', tmax) phenology(\"phenips\", ..., .submodels = 'development',           .onset, .diapause = NULL, .mortality = NULL,           tmean, tmax, rad,           exposure = 'sunny', sister_broods = TRUE)"},{"path":"/reference/model.phenips.apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use PHENIPS — model.phenips.apply","text":"... See phenology() detailled description function. tmean, tmax Daily mean/maximum temperatures °C. rad Daily radiation W * h / m^2. daylength Length day hours. Can created create_daylength_rst() create_daylength_rst(). exposure Specifies sun exposure. Can 'sunny' (default) 'shaded'. sister_broods Set FALSE sister broods calculated.","code":""},{"path":"/reference/model.phenips.apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use PHENIPS — model.phenips.apply","text":"function returns phenology. Look find can analysed.","code":""},{"path":"/reference/model.phenips.apply.html","id":"functioning","dir":"Reference","previous_headings":"","what":"Functioning","title":"Use PHENIPS — model.phenips.apply","text":"following, basic functioning PHENIPS explained. Onset: onset triggered degree days maximum temperature reach specific threshold maximum temperature exceeds minimum flight temperature. Development: beetles develop according slightly modified version optimum curve described Wermelinger Seifert (1998)  depending bark temperature. bark temperature modeled based mean maximum temperature, global radiation sun exposure. new generation emerge last generation fully developed maximum temperature exceeds minimum flight temperature. Diapause: diapause initiated daylength falls threshold. Mortality: White stages (egg pupa) die fixed date. Look find model parameters affect actual calculations values used default.","code":""},{"path":"/reference/model.phenips.apply.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Use PHENIPS — model.phenips.apply","text":"Baier P, Pennerstorfer J, Schopf (2007). “PHENIPS—comprehensive phenology model Ips typographus (L.)(Col., Scolytinae) tool hazard rating bark beetle infestation.” Forest Ecology Management, 249(3), 171--186. doi:10.1016/j.foreco.2007.05.020 . Wermelinger B, Seifert M (1998). “Analysis temperature dependent development spruce bark beetle Ips typographus (L) (Col., Scolytidae).” Journal Applied Entomology, 122(1-5), 185-191. doi:10.1111/j.1439-0418.1998.tb01482.x .","code":""},{"path":[]},{"path":"/reference/model.phenips.customize.html","id":null,"dir":"Reference","previous_headings":"","what":"Customize PHENIPS — model.phenips.customize","title":"Customize PHENIPS — model.phenips.customize","text":"barrks, model() used customize model. , parameters described can used customize PHENIPS. model developed Baier et al. (2007) . Look find apply model.","code":""},{"path":"/reference/model.phenips.customize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Customize PHENIPS — model.phenips.customize","text":"","code":"model(\"phenips\",        # ==== onset ====        dd_onset_start_date = '04-01',       dd_onset_base = 8.3,       dd_onset_threshold = 140,        # ==== onset + development ====        tfly = 16.5,        # ==== development ====        dd_development_base = 8.3,       dd_total_dev = 557,       dev_start = 0,       dev_end = 1,       dev_sister_brood = 0.5,       dev_mortal_min = NULL,       dev_mortal_max = 0.6,        topt = 30.4,       tlow = 8.3,       tup = 38.9,        func_btmean = \\(tmean, rad) { -0.173 + 0.0008518 * rad + 1.054 * tmean},       func_btmax = \\(tmax, rad) { 1.656 + 0.002955 * rad + 0.534 * tmax + 0.01884 * tmax ^ 2 },       func_btdiff = \\(btmax) { (-310.667 + 9.603 * btmax) / 24 },        # ==== diapause ====        daylength_dia = 14.5,        # ==== mortality ====        model_end_date = '10-31' )"},{"path":"/reference/model.phenips.customize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Customize PHENIPS — model.phenips.customize","text":"dd_onset_start_date date, degree days start sum ('MM-DD'). dd_onset_threshold Degree days required trigger onset infestation. Additionally, maximum temperature must exceed tfly. tfly Minimum temperature beetles need fly. dd_onset_base Base temperature calculate degree days calculating beetles development. dd_total_dev Degree days required generation fully develop dev_start, dev_end Share total development egg development starts juvenile beetle's development ends respectively. Usable development /thresholds account mating, oviposition etc. dev_sister_brood Share total development sister brood established. dev_mortal_min, dev_mortal_max Minimum/maximum share total development white stages (egg, larva, pupa). stages, beetles die caused mortality event. topt Temperature optimal development. tlow, tup Temperature /development happens. func_btmean, func_btmax, func_btdiff Functions caclulate effective bark temperature (see Baier et al. 2007 , equations .3 A5). parameter passed SpatRaster: tmean: mean air temperature tmax: maximum air temperature rad: radiation btmax: maximum bark temperature daylength_dia daylength falls threshold, diapause initiated. model_end_date Date model ends white stages (egg, larva, pupa) die.","code":""},{"path":"/reference/model.phenips.customize.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Customize PHENIPS — model.phenips.customize","text":"Baier P, Pennerstorfer J, Schopf (2007). “PHENIPS—comprehensive phenology model Ips typographus (L.)(Col., Scolytinae) tool hazard rating bark beetle infestation.” Forest Ecology Management, 249(3), 171--186. doi:10.1016/j.foreco.2007.05.020 .","code":""},{"path":[]},{"path":"/reference/model.phenips_clim.apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Use PHENIPS-Clim — model.phenips_clim.apply","title":"Use PHENIPS-Clim — model.phenips_clim.apply","text":"page describes usage PHENIPS-Clim phenology(). model specific inputs listed basic functionality explained. PHENIPS-Clim published yet. manual updated publication available. parametrized Ips typographus southern Germany.","code":""},{"path":"/reference/model.phenips_clim.apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use PHENIPS-Clim — model.phenips_clim.apply","text":"","code":"phenology(\"phenips-clim\", ..., tmin, tmean, tmax, rad, daylength,           sister_broods = TRUE, scenario = 'max', exposure = NULL,           onset_mode = NULL, oviposition_mode = NULL, diapause_mode = NULL)  # calculate submodels separately phenology(\"phenips-clim\", ..., .submodels = 'onset', tmax, scenario = 'max', onset_mode = NULL) phenology(\"phenips-clim\", ..., .submodels = 'diapause', tmax, daylength, scenario = 'max', diapause_mode = NULL) phenology(\"phenips-clim\", ..., .submodels = 'mortality', tmin) phenology(\"phenips-clim\", ..., .submodels = 'development',           .onset, .diapause = NULL, .mortality = NULL,           tmin, tmean, tmax, rad, sister_broods = TRUE,           scenario = 'max', exposure = NULL, oviposition_mode = NULL)"},{"path":"/reference/model.phenips_clim.apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use PHENIPS-Clim — model.phenips_clim.apply","text":"... See phenology() detailled description function. See phenology() details. tmin, tmean, tmax Daily minimum/mean/maximum temperatures °C. tmin optional. available used calculate temperature amplitude. , (tmax - tmean) * 2 used amplitude. rad Daily radiation W * h / m^2. daylength Length day hours. Can created create_daylength_rst() create_daylength_rst(). sister_broods Set FALSE disable calculation sister broods. scenario Choose scenario use suitable combination parameters specific situations. scenario defines default value value can overwritten specifying value respective parameter. following scenarios available: mean: list(exposure = 'sunny', onset_mode = 0.5, diapause_mode = 'photoperiodic', oviposition_mode = 0.5) max: list(exposure = 'sunny', onset_mode = 0.1, diapause_mode = 'thermal', oviposition_mode = 0.1) exposure Specifies sun exposure. Can 'sunny'(default) 'shaded'. onset_mode Share beetles already infesting trees necessary trigger onset. Must 0.1, 0.5 0.9 customized. oviposition_mode Share beetles finished oviposition trigger beginning development. Must 0.1, 0.5 0.9 customized. diapause_mode Determines diapause initiated. Can one following options: 'photoperiodic': diapause initiated daylength falls specific threshold. 'thermal': diapause initiated logistic model depends daylength maximum temperature. Share beetles already stopped reproducing necessary trigger diapause. Must thermal 'photoperiodic' customized. 'photoperiodic' chosen, diapause controlled daylength threshold (see parameter daylength_dia ).","code":""},{"path":"/reference/model.phenips_clim.apply.html","id":"functioning","dir":"Reference","previous_headings":"","what":"Functioning","title":"Use PHENIPS-Clim — model.phenips_clim.apply","text":"following, basic functioning PHENIPS-Clim explained. Onset: base onset triggered logistic model relates maximum temperature respective degree days. Beginning base onset, specific level degree days (depending share individuals accounted )  maximum air temperature must reached trigger actual onset. Development: bark temperature emergence new generations determined according PHENIPS, calculation beetles' development rates refined. Rather implying constant development within day, temperature fluctuations incorporated taking daily temperature amplitude account. Additionally, first part development represents pre-oviposition period appear resulting output. Diapause: diapause can initiated due photoperiod according PHENIPS logistic model depends daylength maximum temperature accounts beetles reproduce even shorter days temperatures favorable. second case, PHENIPS-Clim detects reproductive arrest, due adverse abiotic parameters, actual diapause output can adjusted, conditions improve allow reproduction later season. Mortality: White stages (egg pupa) die minimum temperature falls specific threshold. Look find model parameters affect actual calculations values used default.","code":""},{"path":[]},{"path":"/reference/model.phenips_clim.customize.html","id":null,"dir":"Reference","previous_headings":"","what":"Customize PHENIPS-Clim — model.phenips_clim.customize","title":"Customize PHENIPS-Clim — model.phenips_clim.customize","text":"barrks, model() used customize model. , parameters described can used customize PHENIPS-Clim. model currently unpublished. manual updated soon publication available. Look find apply model.","code":""},{"path":"/reference/model.phenips_clim.customize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Customize PHENIPS-Clim — model.phenips_clim.customize","text":"","code":"model(\"phenips-clim\",        # ==== onset ====        dd_onset_start_date = '03-01',       dd_onset_base = 12,       onset_func = \\(tmax, dd_tmax) 0.564071 * tmax + 0.006434 * dd_tmax - 12.37046 > 0,       onset_add_dd = c('0.1' = 0, '0.5' = 90, '0.9' = 190),        # ==== development ====        model_end_date = '12-31',       tfly = 16.5,        dd_total_dev = 557,        dev_start = 0.15,       dev_end = 1,       dev_sister_brood = 0.5,       dev_oviposition = c('0' = 0,                           '0.1' = 0.1,                           '0.5' = 0.15,                           '0.9' = 0.26),        dev_mortal_min = 0,       dev_mortal_max = 0.6,        topt = 30.4,        func_btmean = function(tmean, rad) { -0.173 + 0.0008518 * rad + 1.054 * tmean},       func_btmax = function(tmax, rad) { 1.656 + 0.002955 * rad + 0.534 * tmax + 0.01884 * tmax ^ 2 },       func_btdiff = function(tmax) { (-310.667 + 9.603 * tmax) / 24 },        dev_rates = phenips_clim_get_dev_rates(),        # ==== diapause ====        first_diapause_date = '08-12',       diapause_thermal_func = \\(daylength, tmax) 0.8619156 * daylength + 0.5081128 * tmax - 23.63691 > 0,       daylength_dia = 14.5,        # ==== mortality ====        tlethal = -5  )"},{"path":"/reference/model.phenips_clim.customize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Customize PHENIPS-Clim — model.phenips_clim.customize","text":"dd_onset_start_date date, degree days start sum ('MM-DD'). dd_onset_base Base temperature calculate degree days trigger onset. onset_func Function SpatRasters tmax (maximum temperature) dd_tmax (degree days maximum temperature) parameters. function return TRUE base onset triggered. See onset_add_dd actual onset infestation. onset_add_dd Vector options calculate actual onset infestation. vector named share beetles already started breeding onset triggered (choose option via phenology(..., onset_mode = [option]) applying model). values specify degree days required starting model_end_date Date model ends. tfly Minimum temperature beetles need fly. dd_total_dev Degree days required generation fully develop dev_start, dev_end Share total development egg development starts juvenile beetle's development ends respectively. Usable development /thresholds account mating, oviposition etc. dev_sister_brood Share total development, sister brood established. dev_oviposition Named numeric vector shares total development oviposition finished. vector named share beetles taken account (choose option via phenology(..., oviposition_mode = [option]) applying model). dev_mortal_min, dev_mortal_max Minimum/maximum share total development white stages (egg, larva, pupa). stages, beetles die caused mortality event. topt Temperature optimal development. func_btmean, func_btmax, func_btdiff Functions calculate bark temperatures (see Baier et al. 2007 , equations .3 .5). parameter passed SpatRaster: tmean: mean air temperature tmax: maximum air temperature rad: radiation btmax: maximum bark temperature dev_rates Data frame specifies development rates per day depending mean temperature temperature amplitude. Column names mean temperatures row names temperature amplitudes one decimal place. base onset (see onset_func) trigger actual onset. first_diapause_date Date initiation diapause impossible ('MM-DD'). diapause_thermal_func Function calculate initiation diapause model applied using phenology(..., diapause_mode = 'thermal'). diapause initiated last time function returns TRUE. daylength_dia daylength falls threshold, diapause initiated model applied using phenology(..., diapause_mode = 'photoperiodic'). tlethal Temperature threshold white stages die.","code":""},{"path":"/reference/model.phenips_clim.customize.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Customize PHENIPS-Clim — model.phenips_clim.customize","text":"Baier P, Pennerstorfer J, Schopf (2007). “PHENIPS—comprehensive phenology model Ips typographus (L.)(Col., Scolytinae) tool hazard rating bark beetle infestation.” Forest Ecology Management, 249(3), 171--186. doi:10.1016/j.foreco.2007.05.020 .","code":""},{"path":[]},{"path":"/reference/model.rity.apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Use RITY — model.rity.apply","title":"Use RITY — model.rity.apply","text":"page describes usage RITY phenology(). model specific inputs listed basic functionality explained. RITY (also called RITY-2) published Ogris et al. (2019)  parametrized Ips typographus Slovenia.","code":""},{"path":"/reference/model.rity.apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use RITY — model.rity.apply","text":"","code":"phenology(\"rity\", ..., tmin = NULL, tmean = NULL, tmax, daylength, mode = 'max')  # calculate submodels separately phenology(\"rity\", ..., .submodels = 'onset', tmax) phenology(\"rity\", ..., .submodels = 'diapause', daylength) phenology(\"rity\", ..., .submodels = 'mortality', tmax) phenology(\"rity\", ..., .submodels = 'development',           .onset, .diapause = NULL, .mortality = NULL,           tmin = NULL, tmean = NULL, tmax = NULL, mode = 'max')"},{"path":"/reference/model.rity.apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use RITY — model.rity.apply","text":"tmin, tmean, tmax Daily minimum/mean/maximum temperatures °C. development submodel, parameter obligatory depends mode. daylength Length day hours. Can created create_daylength_rst() create_daylength_rst(). mode Specifies temperature used calculate development. Can min, mean max. .submodels, .onset, .diapause, .mortality, ... See phenology() detailled description function.","code":""},{"path":"/reference/model.rity.apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use RITY — model.rity.apply","text":"function returns phenology. Look find can analysed.","code":""},{"path":"/reference/model.rity.apply.html","id":"functioning","dir":"Reference","previous_headings":"","what":"Functioning","title":"Use RITY — model.rity.apply","text":"following, basic functioning RITY explained. Onset: See PHENIPS. Development: Based PHENIPS modifications: optimum curve calculated according Wermelinger Seifert (1998)  without simplification. minimum, mean maximum bark temperature can used calculate development. temperatures depend respective air temperatures. Diapause: See PHENIPS. Mortality: See PHENIPS. Look find model parameters affect actual calculations values used default.","code":""},{"path":"/reference/model.rity.apply.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Use RITY — model.rity.apply","text":"Ogris N, Ferlan M, Hauptman T, Pavlin R, Kavčič , Jurc M, De Groot M (2019). “RITY--phenology model Ips typographus tool optimization monitoring.” Ecological Modelling, 410, 108775. doi:10.1016/j.ecolmodel.2019.108775 . Wermelinger B, Seifert M (1998). “Analysis temperature dependent development spruce bark beetle Ips typographus (L) (Col., Scolytidae).” Journal Applied Entomology, 122(1-5), 185-191. doi:10.1111/j.1439-0418.1998.tb01482.x .","code":""},{"path":[]},{"path":"/reference/model.rity.customize.html","id":null,"dir":"Reference","previous_headings":"","what":"Customize RITY — model.rity.customize","title":"Customize RITY — model.rity.customize","text":"barrks, model() used customize model. , parameters described can used customize RITY (also called RITY-2). model developed Ogris et al. (2019) . Look find apply model.","code":""},{"path":"/reference/model.rity.customize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Customize RITY — model.rity.customize","text":"","code":"model(\"rity\",        # ==== onset ====        dd_onset_start_date = '03-07',       dd_onset_base = 8.3,       dd_onset_threshold = 155.6,        # ==== onset + development ====        tfly = 14.5,        # ==== development ====        dd_development_base = 8.3,       dd_total_dev = 557,       dev_start = 0,       dev_end = 1,       dev_sister_brood = 0.5,       dev_mortal_min = NULL,       dev_mortal_max = 0.8,        func_ftmin = function(tmin) { 1.44 + 0.82 * tmin },       func_ftmean = function(tmean) { 0.50 + 0.81 * tmean },       func_ftmax = function(tmax) { 1.03 + 0.86 * tmax },        func_btmin = function(ftmin) { 0.56 + 0.99 * ftmin },       func_btmean = function(ftmean) { -0.48 + 1.03 * ftmean },       func_btmax = function(ftmax) { 0.03 + 0.99 * ftmax },        dt_low = 8.3,       dt_up = 38.9,       topt = 30.4,       tmax = 40.9958913,       alpha = 0.02876507,       beta = 3.5922336,       gamma = 1.24657367,        # ==== diapause ====        daylength_dia = 14.5,        # ==== mortality ====        model_end_date = '10-31' )"},{"path":"/reference/model.rity.customize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Customize RITY — model.rity.customize","text":"dd_onset_start_date date, degree days start sum ('MM-DD'). dd_onset_threshold Degree days required trigger onset infestation. Additionally, maximum temperature must exceed tfly. tfly Minimum temperature beetles need fly. dd_onset_base Base temperature calculate degree days development. dd_total_dev Degree days required generation fully develop dev_start, dev_end Share total development egg development starts juvenile beetle's development ends respectively. Usable development /thresholds account mating, oviposition etc. dev_sister_brood Share total development, sister brood established. dev_mortal_min, dev_mortal_max Minimum/maximum share total development white stages (egg, larva, pupa). stages, beetles die caused mortality event. func_ftmean, func_ftmax, func_atdiff Functions caclulate air temperature forest stands (see Ogris et al. 2019 , equations 1 - 3). parameter passed SpatRaster: tmin: min air temperature tmean: mean air temperature tmax: maximum air temperature func_btmean, func_btmax, func_btdiff Functions caclulate bark temperature (see Ogris et al. 2019 , equations 4 - 6). parameter passed SpatRaster: ftmin: min air temperature forest stands ftmean: mean air temperature forest stands ftmax: maximum air temperature forest stands dt_low, dt_up, topt, tmax, alpha, beta, gamma Parameters calculate effective bark temperature (see Ogris et al. 2019 , equations 7 - 9). daylength_dia daylength falls threshold, diapause initiated. model_end_date Date model ends white stages (egg, larva, pupa) die.","code":""},{"path":"/reference/model.rity.customize.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Customize RITY — model.rity.customize","text":"Ogris N, Ferlan M, Hauptman T, Pavlin R, Kavčič , Jurc M, De Groot M (2019). “RITY--phenology model Ips typographus tool optimization monitoring.” Ecological Modelling, 410, 108775. doi:10.1016/j.ecolmodel.2019.108775 .","code":""},{"path":[]},{"path":"/reference/model_combine.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine different (sub-)models — model_combine","title":"Combine different (sub-)models — model_combine","text":"Combine different (sub-)models.","code":""},{"path":"/reference/model_combine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine different (sub-)models — model_combine","text":"","code":"model_combine(...)"},{"path":"/reference/model_combine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine different (sub-)models — model_combine","text":"... Phenology models, model names lists keys model submodels. last case, submodels specified used (one 'onset', 'diapause', 'mortality' 'development') respective model. multiple models supplied submodel, last one overwrites others.","code":""},{"path":[]},{"path":"/reference/params.html","id":null,"dir":"Reference","previous_headings":"","what":"Get model parameters — params","title":"Get model parameters — params","text":"Returns parameters model list.","code":""},{"path":"/reference/params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get model parameters — params","text":"","code":"params(m)"},{"path":"/reference/params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get model parameters — params","text":"m phenology model","code":""},{"path":"/reference/phenips_clim_get_dev_rates.html","id":null,"dir":"Reference","previous_headings":"","what":"Get development rates for PHENIPS-Clim — phenips_clim_get_dev_rates","title":"Get development rates for PHENIPS-Clim — phenips_clim_get_dev_rates","text":"Get development rates PHENIPS-Clim","code":""},{"path":"/reference/phenips_clim_get_dev_rates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get development rates for PHENIPS-Clim — phenips_clim_get_dev_rates","text":"","code":"phenips_clim_get_dev_rates()"},{"path":"/reference/phenips_clim_get_dev_rates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get development rates for PHENIPS-Clim — phenips_clim_get_dev_rates","text":"Returns matrix determines development relation mean temperature temmperature amplitude. Col names indicate mean temperature row names temperature amplitude °C * 10.","code":""},{"path":"/reference/phenology.html","id":null,"dir":"Reference","previous_headings":"","what":"Central function to calculate a phenology — phenology","title":"Central function to calculate a phenology — phenology","text":"Calculate phenology (subparts) specific model.","code":""},{"path":"/reference/phenology.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Central function to calculate a phenology — phenology","text":"","code":"phenology(   .model,   .data = NULL,   .dates = NULL,   .win = NULL,   .ext = \"tif\",   .onset = NULL,   .diapause = NULL,   .mortality = NULL,   .submodels = c(\"onset\", \"diapause\", \"mortality\", \"development\"),   .setup_only = FALSE,   .stations = NULL,   .storage = NULL,   .quiet = FALSE,   ... )"},{"path":"/reference/phenology.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Central function to calculate a phenology — phenology","text":".model phenology model model name (see model(), model_combine()). .data Data passed model. can one following: Character string: raster data loaded path specified. files named like respective model inputs. Named list: element contains input data according name. Data frame (station data): columns date station (name station). Additional columns named like respective model inputs. Additionally, data can passed ... argument. Look model application manuals find inputs required specific model: model.bso.apply, model.phenips.apply, model.rity.apply, model.chapy.apply, model.joensson.apply, model.lange.apply, model.phenips_clim.apply. .dates Vector dates data restricted . .win SpatExtent set window (area interest) .data path load raster data . .ext Extension files used .data path load raster data . .onset, .diapause, .mortality Pass custom precalculated phenological events model. See create_events find create events manually. Alternatively, return value get_onset_rst(), get_diapause_rst() get_mortality_rst() used (as_doy = FALSE) extract respective phenological event another phenology. case, phenology must match temporal spatial extent inputs. .submodels Character vector. Specifies submodels calculated. Can subset c('onset', 'diapause', 'mortality', 'development'). .setup_only TRUE inputs preprocessed without calculating submodels. preprocessed data can used input phenology() calls can accessed via get_input_data(). .stations Assign stations phenology. See stations_create() details. .storage set, path specified used save (intermediate) results. phenology() called successively growing amount data, calculations continue stopped. can save calculation time especially large raster inputs. Note work raster inputs terra::sources() empty. Otherwise results calculations saved successive calculations possible. input data passed, phenology loaded storage. .quiet TRUE, messages suppressed. ... Parameters passed model. Must named according model inputs. See .data alternative ways pass data model.","code":""},{"path":"/reference/phenology.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Central function to calculate a phenology — phenology","text":"Returns phenology list. Look find phenology can analysed. recommended access list elements directly.","code":""},{"path":[]},{"path":"/reference/plot_development_diagram.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a development diagram — plot_development_diagram","title":"Plot a development diagram — plot_development_diagram","text":"development diagram illustrates beetles' development appearing generations within year.","code":""},{"path":"/reference/plot_development_diagram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a development diagram — plot_development_diagram","text":"","code":"plot_development_diagram(   .phenos,   .station = prop_stations(.phenos[[1]])[1],   .generations = NULL,   .colors = barrks_colors(\"diagram_lines\"),   .fill = barrks_colors(\"diagram_fill\"),   .labels = barrks_labels(\"diagram\"),   .legend_col = TRUE,   .legend_lty = TRUE,   .group = TRUE,   .minmax_only = FALSE,   .fun_bg = NULL,   .lty = \"solid\",   .lwd = 2,   .split_date = NULL,   .lty2 = \"dotted\",   ... )"},{"path":"/reference/plot_development_diagram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a development diagram — plot_development_diagram","text":".phenos List (named) phenology objects single phenology plotted (see phenology()). .station Pass character vector choose station assigned pheno name, pass different station. See stations_create() details. .generations Generations shown. .colors, .fill, .labels Character vectors. Change line colors, fill labels generations starting first generation followed consecutively elements generations (including sister broods). .legend_col, legend_lty Manipulate appearance legends colors line types. Pass TRUE/FALSE enable/disable respective legend. customization respective legend, list parameters graphics::legend can passed. .group Select phenology objects used draw filling. can character vector phenology names, integer vector phenology numbers, TRUE phenology objects used. .minmax_only TRUE, minimum maximum development line plotted. .fun_bg Function draw background. .lty, .lwd Use specific line types line widths. Vectors length .phenos assign values respective phenology. .split_date, lty2 .split_date reached, line type change lty2 area lines filled anymore. ... Parameters passed base::plot().","code":""},{"path":"/reference/properties.html","id":null,"dir":"Reference","previous_headings":"","what":"Get phenology properties — properties","title":"Get phenology properties — properties","text":"examine phenology, different functions query properties.","code":""},{"path":"/reference/properties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get phenology properties — properties","text":"","code":"## get the year the phenology was calculated for prop_year(pheno)  ## get all dates that are covered by the phenology prop_dates(pheno)  ## get the first date that is covered by the phenology prop_first_date(pheno)  ## get the last date that is covered by the phenology prop_last_date(pheno)  ## get all hatched generations as numeric vector prop_hatched_generations(pheno)  ## get all hatched filial generations as numeric vector prop_filial_generations(pheno)  ## get all hatched sister broods as numeric vector prop_sister_broods(pheno)  ## get the stations assigned to the phenology prop_stations(pheno)"},{"path":"/reference/properties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get phenology properties — properties","text":"pheno  phenology (see phenology())","code":""},{"path":"/reference/save_phenology.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a phenology — save_phenology","title":"Save a phenology — save_phenology","text":"Saves phenology path.","code":""},{"path":"/reference/save_phenology.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a phenology — save_phenology","text":"","code":"save_phenology(   pheno,   .storage,   .submodels = c(\"onset\", \"diapause\", \"mortality\", \"development\"),   .overwrite = FALSE,   .ext = \".tif\",   .quiet = FALSE )"},{"path":"/reference/save_phenology.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a phenology — save_phenology","text":"pheno phenology, calculated phenology(). .storage Path defines save phenology. .submodels submodels saved. .overwrite overwirte existing storage? .ext Extension raster files. .quiet TRUE, messages suppressed.","code":""},{"path":"/reference/stations_assign.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign stations to a phenology — stations_assign","title":"Assign stations to a phenology — stations_assign","text":"Assign stations phenology.","code":""},{"path":"/reference/stations_assign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign stations to a phenology — stations_assign","text":"","code":"stations_assign(pheno, stations)"},{"path":"/reference/stations_assign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign stations to a phenology — stations_assign","text":"pheno  phenology (see phenology()) stations Use return value stations_create() .","code":""},{"path":"/reference/stations_assign.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign stations to a phenology — stations_assign","text":"Returns phenology passed function stations assigned.","code":""},{"path":[]},{"path":"/reference/stations_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the raster cells of stations — stations_cells","title":"Get the raster cells of stations — stations_cells","text":"Get raster cells stations.","code":""},{"path":"/reference/stations_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the raster cells of stations — stations_cells","text":"","code":"stations_cells(stations)"},{"path":"/reference/stations_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Build stations — stations_create","title":"Build stations — stations_create","text":"Build stations can used extract point data phenology.","code":""},{"path":"/reference/stations_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build stations — stations_create","text":"","code":"stations_create(station_names, cells)"},{"path":"/reference/stations_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build stations — stations_create","text":"station_names Character vector specifies names stations. cells Numbers cells represented stations.","code":""},{"path":"/reference/stations_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build stations — stations_create","text":"Returns stations can assigned phenology object used get_..._df-functions.","code":""},{"path":[]},{"path":"/reference/stations_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the names of stations — stations_names","title":"Get the names of stations — stations_names","text":"Get names stations.","code":""},{"path":"/reference/stations_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the names of stations — stations_names","text":"","code":"stations_names(stations)"},{"path":[]},{"path":"/TODO.html","id":"general","dir":"","previous_headings":"","what":"General","title":"TODO","text":"Unify status messages (print temporary ?) Implement argument checks Add examples function documentations (e.g. model_combine()) create_daylength_...(): switch suncalc geosphere (less dependencies…) Define BarrksPheno (similar) class Make order input raster layers irrelevant (use date) phenology(): rasters .storage used even though .dates NULL fill incomplete generations: yes/customize fill .split_date","code":""},{"path":"/TODO.html","id":"models","dir":"","previous_headings":"","what":"Models","title":"TODO","text":"Implement original daylength function? Define functions bso_save_phenology() bso_load_phenology() Enable application mortality bso_plot_flight_diagram()/bso_plot_stage_diagram(): make x-axis optional Improve performance bso_plot_stage_diagram() Define functions get share individuals flying / specific stage / … Improve performace bso_calc_tphloem() Lange: Improve performance Improve performance calculation development rates Allow custom intervals function dev_rates","code":""},{"path":"/TODO.html","id":"formal-testing","dir":"","previous_headings":"","what":"Formal testing","title":"TODO","text":"BSO: storage, sister breeders load_phenology()/save_phenology","code":""},{"path":"/TODO.html","id":"design","dir":"","previous_headings":"","what":"Design","title":"TODO","text":"Package logo Use DTM vignette ‘model-comparison’ barrks_colors('bso_flight') appropriate?","code":""}]
